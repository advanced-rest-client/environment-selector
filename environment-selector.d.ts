/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   environment-selector.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {VariablesConsumerMixin} from '@advanced-rest-client/variables-consumer-mixin/variables-consumer-mixin.js';

declare namespace UiElements {

  /**
   * An element to select current variables environment.
   *
   * Renders a material design dropdown with list of available environments.
   * It always render environment **Default** (value `default`).
   *
   * ### Example
   *
   * ```html
   * <environment-selector></environment-selector>
   * ```
   *
   * ```javascript
   * document.queryElement('environment-selector')
   * .addEventListener('selected-environment-changed', (e) => {
   *    console.log(e.detail.value); // Selected environment
   * });
   * ```
   *
   * ### Styling
   *
   * Use variables for `paper-dropdown-menu`, `paper-listbox` and `paper-item`
   * to style the control.
   */
  class EnvironmentSelector extends
    VariablesConsumerMixin(
    Object) {

    /**
     * Selected environment.
     */
    selected: string|null|undefined;
    onenvironment: any;

    /**
     * Set to make selector's label dissapear after selection has been made.
     */
    noLabelFloat: boolean|null|undefined;

    /**
     * True when the dropdown is opened. It can be used to change the state.
     */
    opened: any;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Handler for the `selected-environment-changed` event.
     */
    _envChangedHandler(e: CustomEvent|null): void;
    render(): any;

    /**
     * Handler for the `selected` property change
     */
    _environmentChanged(selected: String|null): void;

    /**
     * Dispatches `selected-environment-changed` custom event
     *
     * @param value New value
     * @returns Dispatched event
     */
    _dispatchChange(value: String|null): CustomEvent|null;
    _handleSelection(e: any): void;
    _handleOpened(e: any): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "environment-selector": UiElements.EnvironmentSelector;
  }
}
