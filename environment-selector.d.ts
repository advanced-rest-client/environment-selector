/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   environment-selector.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../paper-item/paper-item.d.ts" />
/// <reference path="../paper-dropdown-menu/paper-dropdown-menu.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../variables-consumer-mixin/variables-consumer-mixin.d.ts" />

declare namespace UiElements {

  /**
   * An element to select current variables environment.
   *
   * Renders a material design dropdown with list of available environments.
   * It always render environment **Default** (value `default`).
   *
   * It should be used with
   * [variables-manager](https://github.com/advanced-rest-client/variables-manager)
   * element or other element that handles `environment-list`
   * and `environment-current` custom events. See manager's
   * description for more information.
   *
   * ### Example
   *
   * ```html
   * <environment-selector></environment-selector>
   * ```
   *
   * ```javascript
   * document.queryElement('environment-selector')
   * .addEventListener('selected-environment-changed', (e) => {
   *  console.log(e.detail.value); // Selected environment
   * });
   * ```
   *
   * ### Styling
   *
   * `<environment-selector>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--environment-selector` | Mixin applied to the element | `{}`
   *
   * Use variables for `paper-dropdown-menu`, `paper-listbox` and `paper-item`
   * to style the control.
   */
  class EnvironmentSelector extends
    ArcComponents.VariablesConsumerMixin(
    Polymer.Element) {

    /**
     * Set to make selector's label dissapear after selection has been made.
     */
    noLabelFloat: boolean|null|undefined;

    /**
     * Selected environment.
     */
    selected: string|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Handler for the `selected-environment-changed` event.
     */
    _envChangedHandler(e: any): void;

    /**
     * Handler for the `selected` property change
     */
    _environmentChanged(selected: any): void;
  }
}

interface HTMLElementTagNameMap {
  "environment-selector": UiElements.EnvironmentSelector;
}
